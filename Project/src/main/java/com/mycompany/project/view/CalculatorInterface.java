/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.project.view;

import com.mycompany.project.controller.CalculatorController;

import com.mycompany.project.command.CopyStackCommand;
import com.mycompany.project.exception.FormatFormulaException;
import com.mycompany.project.exception.NameFormulaAlreadyExists;
import com.mycompany.project.exception.OperationDoesNotExist;
import com.mycompany.project.model.Stack;
import com.mycompany.project.exception.StackEmptyException;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author immacolata
 */
public class CalculatorInterface extends javax.swing.JFrame {

    static CalculatorController controller;

    DefaultListModel dlm = new DefaultListModel();
    static DefaultListModel dlmFormulas = new DefaultListModel();

    /**
     * Creates new form calculatorInterface
     */
    public CalculatorInterface() {
        initComponents();
        controller = new CalculatorController(new Stack<>());
        try {
            controller.loadFile();
        } catch (FileNotFoundException ex) {

        } catch (ClassNotFoundException ex) {
            popUp("Saved Failed!", "error");
        } catch (IOException ex) {
            popUp("Saved Failed!", "error");
        }
        viewFormulas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelCalculator = new javax.swing.JPanel();
        jPanelNumber = new javax.swing.JPanel();
        jButtonMultiplication = new javax.swing.JButton();
        jButtonDivision = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonSub = new javax.swing.JButton();
        jPanelVariable = new javax.swing.JPanel();
        jButtonSaveToVariable = new javax.swing.JButton();
        jButtonSaveToStack = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButtonSubToVariable = new javax.swing.JButton();
        jButtonAddToVariable = new javax.swing.JButton();
        jButtonSaveVariable = new javax.swing.JButton();
        jButtonRestoreVariable = new javax.swing.JButton();
        jPanelOperation = new javax.swing.JPanel();
        jButtonComplex = new javax.swing.JButton();
        jButtonInvert = new javax.swing.JButton();
        jButtonMod = new javax.swing.JButton();
        jButtonLn = new javax.swing.JButton();
        jButtonSqrt = new javax.swing.JButton();
        jButtonArg = new javax.swing.JButton();
        jButtonPow = new javax.swing.JButton();
        jButtonExp = new javax.swing.JButton();
        jButtonSin = new javax.swing.JButton();
        jButtonCos = new javax.swing.JButton();
        jButtonTan = new javax.swing.JButton();
        jButtonASin = new javax.swing.JButton();
        jButtonACos = new javax.swing.JButton();
        jButtonATan = new javax.swing.JButton();
        jScrollPaneStack = new javax.swing.JScrollPane();
        jListStack = new javax.swing.JList<>(dlm);
        jPanelStackOperation = new javax.swing.JPanel();
        jButtonSwap = new javax.swing.JButton();
        jButtonDup = new javax.swing.JButton();
        jButtonDrop = new javax.swing.JButton();
        jButtonOver = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jScrollPaneTextArea = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonIns = new javax.swing.JButton();
        jButtonSaveFormula = new javax.swing.JButton();
        jButtonAddFormula1 = new javax.swing.JButton();
        jScrollPaneFormulas = new javax.swing.JScrollPane();
        jListFormulas = new javax.swing.JList<>(dlmFormulas);
        jButtonExeFormula = new javax.swing.JButton();
        removeFormula = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelCalculator.setBackground(new java.awt.Color(51, 51, 51));
        jPanelCalculator.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 255, 255), new java.awt.Color(255, 255, 255), null, new java.awt.Color(255, 255, 255)));

        jPanelNumber.setBackground(new java.awt.Color(51, 51, 51));

        jButtonMultiplication.setBackground(new java.awt.Color(204, 204, 204));
        jButtonMultiplication.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonMultiplication.setText("*");
        jButtonMultiplication.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonMultiplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMultiplicationActionPerformed(evt);
            }
        });

        jButtonDivision.setBackground(new java.awt.Color(204, 204, 204));
        jButtonDivision.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonDivision.setText("/");
        jButtonDivision.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDivisionActionPerformed(evt);
            }
        });

        jButtonAdd.setBackground(new java.awt.Color(204, 204, 204));
        jButtonAdd.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonAdd.setText("+");
        jButtonAdd.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonSub.setBackground(new java.awt.Color(204, 204, 204));
        jButtonSub.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonSub.setText("-");
        jButtonSub.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNumberLayout = new javax.swing.GroupLayout(jPanelNumber);
        jPanelNumber.setLayout(jPanelNumberLayout);
        jPanelNumberLayout.setHorizontalGroup(
            jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNumberLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelNumberLayout.createSequentialGroup()
                        .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonMultiplication, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelNumberLayout.createSequentialGroup()
                        .addComponent(jButtonSub, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDivision, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanelNumberLayout.setVerticalGroup(
            jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNumberLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jButtonMultiplication, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDivision, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSub, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jPanelVariable.setBackground(new java.awt.Color(51, 51, 51));

        jButtonSaveToVariable.setBackground(new java.awt.Color(224, 225, 255));
        jButtonSaveToVariable.setText(">x");
        jButtonSaveToVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveToVariableActionPerformed(evt);
            }
        });

        jButtonSaveToStack.setBackground(new java.awt.Color(224, 225, 255));
        jButtonSaveToStack.setText("<x");
        jButtonSaveToStack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveToStackActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", " " }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButtonSubToVariable.setBackground(new java.awt.Color(224, 225, 255));
        jButtonSubToVariable.setText("-x");
        jButtonSubToVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubToVariableActionPerformed(evt);
            }
        });

        jButtonAddToVariable.setBackground(new java.awt.Color(224, 225, 255));
        jButtonAddToVariable.setText("+x");
        jButtonAddToVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddToVariableActionPerformed(evt);
            }
        });

        jButtonSaveVariable.setBackground(new java.awt.Color(224, 225, 255));
        jButtonSaveVariable.setText(" SAVE VAR");
        jButtonSaveVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveVariableActionPerformed(evt);
            }
        });

        jButtonRestoreVariable.setBackground(new java.awt.Color(224, 225, 255));
        jButtonRestoreVariable.setText("RESTORE VAR");
        jButtonRestoreVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRestoreVariableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelVariableLayout = new javax.swing.GroupLayout(jPanelVariable);
        jPanelVariable.setLayout(jPanelVariableLayout);
        jPanelVariableLayout.setHorizontalGroup(
            jPanelVariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVariableLayout.createSequentialGroup()
                .addComponent(jComboBox1, 0, 111, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSaveToVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSaveToStack, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSubToVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonAddToVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanelVariableLayout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(jButtonSaveVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonRestoreVariable)
                .addGap(34, 34, 34))
        );
        jPanelVariableLayout.setVerticalGroup(
            jPanelVariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVariableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelVariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSaveToVariable)
                    .addComponent(jButtonSaveToStack)
                    .addComponent(jButtonSubToVariable)
                    .addComponent(jButtonAddToVariable)
                    .addComponent(jComboBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelVariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSaveVariable)
                    .addComponent(jButtonRestoreVariable))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelOperation.setBackground(new java.awt.Color(51, 51, 51));

        jButtonComplex.setBackground(new java.awt.Color(0, 51, 255));
        jButtonComplex.setForeground(new java.awt.Color(255, 255, 255));
        jButtonComplex.setText("i");
        jButtonComplex.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonComplex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComplexActionPerformed(evt);
            }
        });

        jButtonInvert.setBackground(new java.awt.Color(0, 0, 0));
        jButtonInvert.setForeground(new java.awt.Color(255, 255, 255));
        jButtonInvert.setText("+-");
        jButtonInvert.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonInvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInvertActionPerformed(evt);
            }
        });

        jButtonMod.setBackground(new java.awt.Color(0, 0, 0));
        jButtonMod.setForeground(new java.awt.Color(255, 255, 255));
        jButtonMod.setText("mod");
        jButtonMod.setToolTipText("");
        jButtonMod.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModActionPerformed(evt);
            }
        });

        jButtonLn.setBackground(new java.awt.Color(0, 0, 0));
        jButtonLn.setForeground(new java.awt.Color(255, 255, 255));
        jButtonLn.setText("LN");
        jButtonLn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonLn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLnActionPerformed(evt);
            }
        });

        jButtonSqrt.setBackground(new java.awt.Color(0, 0, 0));
        jButtonSqrt.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSqrt.setText("sqrt");
        jButtonSqrt.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSqrtActionPerformed(evt);
            }
        });

        jButtonArg.setBackground(new java.awt.Color(0, 0, 0));
        jButtonArg.setForeground(new java.awt.Color(255, 255, 255));
        jButtonArg.setText("arg");
        jButtonArg.setToolTipText("");
        jButtonArg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonArg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonArgActionPerformed(evt);
            }
        });

        jButtonPow.setBackground(new java.awt.Color(0, 0, 0));
        jButtonPow.setForeground(new java.awt.Color(255, 255, 255));
        jButtonPow.setText("pow");
        jButtonPow.setToolTipText("");
        jButtonPow.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonPow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPowActionPerformed(evt);
            }
        });

        jButtonExp.setBackground(new java.awt.Color(0, 0, 0));
        jButtonExp.setForeground(new java.awt.Color(255, 255, 255));
        jButtonExp.setText("exp");
        jButtonExp.setToolTipText("");
        jButtonExp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExpActionPerformed(evt);
            }
        });

        jButtonSin.setBackground(new java.awt.Color(0, 0, 0));
        jButtonSin.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSin.setText("sin");
        jButtonSin.setToolTipText("");
        jButtonSin.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSinActionPerformed(evt);
            }
        });

        jButtonCos.setBackground(new java.awt.Color(0, 0, 0));
        jButtonCos.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCos.setText("cos");
        jButtonCos.setToolTipText("");
        jButtonCos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCosActionPerformed(evt);
            }
        });

        jButtonTan.setBackground(new java.awt.Color(0, 0, 0));
        jButtonTan.setForeground(new java.awt.Color(255, 255, 255));
        jButtonTan.setText("tan");
        jButtonTan.setToolTipText("");
        jButtonTan.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonTan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTanActionPerformed(evt);
            }
        });

        jButtonASin.setBackground(new java.awt.Color(0, 0, 0));
        jButtonASin.setForeground(new java.awt.Color(255, 255, 255));
        jButtonASin.setText("asin");
        jButtonASin.setToolTipText("");
        jButtonASin.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonASin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonASinActionPerformed(evt);
            }
        });

        jButtonACos.setBackground(new java.awt.Color(0, 0, 0));
        jButtonACos.setForeground(new java.awt.Color(255, 255, 255));
        jButtonACos.setText("acos");
        jButtonACos.setToolTipText("");
        jButtonACos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonACos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonACosActionPerformed(evt);
            }
        });

        jButtonATan.setBackground(new java.awt.Color(0, 0, 0));
        jButtonATan.setForeground(new java.awt.Color(255, 255, 255));
        jButtonATan.setText("atan");
        jButtonATan.setToolTipText("");
        jButtonATan.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonATan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonATanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelOperationLayout = new javax.swing.GroupLayout(jPanelOperation);
        jPanelOperation.setLayout(jPanelOperationLayout);
        jPanelOperationLayout.setHorizontalGroup(
            jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOperationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOperationLayout.createSequentialGroup()
                        .addComponent(jButtonComplex, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInvert, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPow, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonMod, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExp, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelOperationLayout.createSequentialGroup()
                        .addComponent(jButtonSin, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCos, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonTan, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonASin, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonACos, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonATan, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonArg, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanelOperationLayout.setVerticalGroup(
            jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelOperationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonComplex, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonInvert, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonPow, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonExp, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonLn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonMod, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSin, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTan, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonASin, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonACos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonATan, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonArg, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jListStack.setBackground(new java.awt.Color(230, 230, 230));
        jListStack.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jListStack.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jScrollPaneStack.setViewportView(jListStack);

        jPanelStackOperation.setBackground(new java.awt.Color(51, 51, 51));

        jButtonSwap.setBackground(new java.awt.Color(255, 0, 0));
        jButtonSwap.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSwap.setText("SWAP");
        jButtonSwap.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSwap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSwapActionPerformed(evt);
            }
        });

        jButtonDup.setBackground(new java.awt.Color(255, 0, 0));
        jButtonDup.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDup.setText("DUP");
        jButtonDup.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDupActionPerformed(evt);
            }
        });

        jButtonDrop.setBackground(new java.awt.Color(255, 0, 0));
        jButtonDrop.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDrop.setText("DROP");
        jButtonDrop.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDropActionPerformed(evt);
            }
        });

        jButtonOver.setBackground(new java.awt.Color(255, 0, 0));
        jButtonOver.setForeground(new java.awt.Color(255, 255, 255));
        jButtonOver.setText("OVER");
        jButtonOver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonOver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOverActionPerformed(evt);
            }
        });

        jButtonClear.setBackground(new java.awt.Color(255, 0, 0));
        jButtonClear.setForeground(new java.awt.Color(255, 255, 255));
        jButtonClear.setText("CLEAR");
        jButtonClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelStackOperationLayout = new javax.swing.GroupLayout(jPanelStackOperation);
        jPanelStackOperation.setLayout(jPanelStackOperationLayout);
        jPanelStackOperationLayout.setHorizontalGroup(
            jPanelStackOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStackOperationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSwap, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDrop, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDup, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOver, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelStackOperationLayout.setVerticalGroup(
            jPanelStackOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStackOperationLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanelStackOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSwap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelStackOperationLayout.createSequentialGroup()
                        .addGroup(jPanelStackOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelStackOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonDrop, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelStackOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonDup, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonOver, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPaneTextArea.setViewportView(jTextArea1);
        jTextArea1.getAccessibleContext().setAccessibleParent(jTextArea1);

        jButtonIns.setBackground(new java.awt.Color(255, 0, 0));
        jButtonIns.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jButtonIns.setForeground(new java.awt.Color(255, 255, 255));
        jButtonIns.setText("INS");
        jButtonIns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsActionPerformed(evt);
            }
        });

        jButtonSaveFormula.setBackground(new java.awt.Color(102, 0, 153));
        jButtonSaveFormula.setFont(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        jButtonSaveFormula.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSaveFormula.setText("SAVE FORMULA");
        jButtonSaveFormula.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSaveFormula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveFormulaActionPerformed(evt);
            }
        });

        jButtonAddFormula1.setBackground(new java.awt.Color(102, 0, 153));
        jButtonAddFormula1.setFont(new java.awt.Font("Lucida Grande", 1, 8)); // NOI18N
        jButtonAddFormula1.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAddFormula1.setText("ADD FORMULA");
        jButtonAddFormula1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddFormula1ActionPerformed(evt);
            }
        });

        jListFormulas.setBackground(new java.awt.Color(230, 230, 230));
        jListFormulas.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jListFormulas.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jListFormulas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListFormulasMouseClicked(evt);
            }
        });
        jScrollPaneFormulas.setViewportView(jListFormulas);

        jButtonExeFormula.setBackground(new java.awt.Color(102, 0, 153));
        jButtonExeFormula.setFont(new java.awt.Font("Lucida Grande", 1, 8)); // NOI18N
        jButtonExeFormula.setForeground(new java.awt.Color(255, 255, 255));
        jButtonExeFormula.setText("EXE FORMULA");
        jButtonExeFormula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExeFormulaActionPerformed(evt);
            }
        });

        removeFormula.setBackground(new java.awt.Color(102, 0, 153));
        removeFormula.setFont(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        removeFormula.setForeground(new java.awt.Color(255, 255, 255));
        removeFormula.setText("REMOVE FORMULA");
        removeFormula.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        removeFormula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFormulaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCalculatorLayout = new javax.swing.GroupLayout(jPanelCalculator);
        jPanelCalculator.setLayout(jPanelCalculatorLayout);
        jPanelCalculatorLayout.setHorizontalGroup(
            jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCalculatorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCalculatorLayout.createSequentialGroup()
                        .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCalculatorLayout.createSequentialGroup()
                                .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanelVariable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPaneTextArea))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonIns, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonExeFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonAddFormula1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanelCalculatorLayout.createSequentialGroup()
                                .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanelCalculatorLayout.createSequentialGroup()
                                        .addComponent(jPanelStackOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37)
                                        .addComponent(jButtonSaveFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelCalculatorLayout.createSequentialGroup()
                                        .addComponent(jPanelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanelOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(removeFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelCalculatorLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPaneStack, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPaneFormulas, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelCalculatorLayout.setVerticalGroup(
            jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCalculatorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCalculatorLayout.createSequentialGroup()
                        .addComponent(jButtonIns, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jButtonExeFormula)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAddFormula1))
                    .addGroup(jPanelCalculatorLayout.createSequentialGroup()
                        .addComponent(jScrollPaneTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSaveFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(removeFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelStackOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneStack, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(jScrollPaneFormulas))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelCalculator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelCalculator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * This method links the button clear to the operation clear
     *
     * @param evt which is the click on the button
     */
    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        try {
            // TODO add your handling code here:
            controller.execOperation("clear");
        } catch (StackEmptyException ex) {
            //popUp("Stack is empty", "warning");
        } catch (OperationDoesNotExist ex) {
            Logger.getLogger(CalculatorInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonClearActionPerformed
    /**
     * This method links the button sqrt to the operation squareRoot
     *
     * @param evt which is the click on the button
     */
    private void jButtonSqrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSqrtActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("sqrt");

        } catch (StackEmptyException ex) {

            popUp("You need at least one item in the stack!", "warning");
            copy.undo();
        } catch (OperationDoesNotExist ex) {
            Logger.getLogger(CalculatorInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonSqrtActionPerformed
    /**
     * This method links the button ln to the operation natural logarithm
     *
     * @param evt which is the click on the button
     */
    private void jButtonLnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLnActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("logarithm");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        } catch (ArithmeticException ex) {
            popUp(ex.getMessage(), "error");
            copy.undo();
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonLnActionPerformed
    /**
     * This method links the button mod to the operation modulus
     *
     * @param evt which is the click on the button
     */
    private void jButtonModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("mod");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonModActionPerformed
    /**
     * This method links the button +- to the operation invertion of sign
     *
     * @param evt which is the click on the button
     */
    private void jButtonInvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInvertActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("+-");

        } catch (StackEmptyException ex) {
            popUp("You need at least one item in the stack!", "warning");
            copy.undo();

        } catch (OperationDoesNotExist ex) {
            Logger.getLogger(CalculatorInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonInvertActionPerformed
    /*
    This method links the button i to the insertion on the textArea of the char i
     */
    private void jButtonComplexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComplexActionPerformed
        // TODO add your handling code here:
        jTextArea1.append("i");
    }//GEN-LAST:event_jButtonComplexActionPerformed
    /**
     * This method links the button - to the operation substraction
     *
     * @param evt which is the click on the button
     */
    private void jButtonSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("-");

        } catch (StackEmptyException ex) {
            popUp("You need at least 2 items in the stack!", "warning");
            copy.undo();
        } catch (OperationDoesNotExist ex) {
            Logger.getLogger(CalculatorInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonSubActionPerformed
    /**
     * This method links the button + to the operation sum
     *
     * @param evt which is the click on the button
     */
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("+");

        } catch (StackEmptyException ex) {
            popUp("You need at least 2 items in the stack!", "warning");
            copy.undo();
        } catch (OperationDoesNotExist ex) {
            Logger.getLogger(CalculatorInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonAddActionPerformed
    /**
     * This method links the button : to the operation division
     *
     * @param evt which is the click on the button
     */
    private void jButtonDivisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDivisionActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation(":");

        } catch (StackEmptyException ex) {
            popUp("You need at least 2 items in the stack!", "warning");
            copy.undo();
        } catch (ArithmeticException ex) {
            popUp(ex.getMessage(), "error");
            copy.undo();
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonDivisionActionPerformed
    /**
     * This method links the button arg to the operation argument of a complex
     * number
     *
     * @param evt which is the click on the button
     */
    private void jButtonArgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonArgActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("arg");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonArgActionPerformed
    /**
     * This method links the button pow to the operation power
     *
     * @param evt which is the click on the button
     */
    private void jButtonPowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPowActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("pow");

        } catch (StackEmptyException ex) {
            popUp("You need at least 2 items in the stack!", "warning");
            copy.undo();

        } catch (OperationDoesNotExist ex) {
            Logger.getLogger(CalculatorInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonPowActionPerformed
    /**
     * This method links the button exp to the operation exponential
     *
     * @param evt which is the click on the button
     */
    private void jButtonExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExpActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("exp");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonExpActionPerformed
    /**
     * This method links the button sin to the operation sine
     *
     * @param evt which is the click on the button
     */
    private void jButtonSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSinActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("sen");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonSinActionPerformed
    /**
     * This method links the button cos to the operation cosine
     *
     * @param evt which is the click on the button
     */
    private void jButtonCosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCosActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("cosen");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonCosActionPerformed
    /**
     * This method links the button tan to the operation clear tangent
     *
     * @param evt which is the click on the button
     */
    private void jButtonTanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTanActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("tan");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonTanActionPerformed
    /**
     * This method links the button asin to the operation asine
     *
     * @param evt which is the click on the button
     */
    private void jButtonASinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonASinActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("asen");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (ArithmeticException ex) {
            popUp(ex.getMessage(), "error");
            copy.undo();
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonASinActionPerformed
    /**
     * This method links the button arcos to the operation arcosine
     *
     * @param evt which is the click on the button
     */
    private void jButtonACosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonACosActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("acosen");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (ArithmeticException ex) {
            popUp(ex.getMessage(), "error");
            copy.undo();
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonACosActionPerformed
    /**
     * This method links the button atang to the operation atangent
     *
     * @param evt which is the click on the button
     */
    private void jButtonATanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonATanActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("atang");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonATanActionPerformed
    /**
     * This method links the button drop to the operation drop
     *
     * @param evt which is the click on the button
     */
    private void jButtonDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDropActionPerformed
        // TODO add your handling code here:
        try {
            controller.execOperation("drop");
        } catch (StackEmptyException ex) {
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonDropActionPerformed
    /**
     * This method links the button dup to the operation dup
     *
     * @param evt which is the click on the button
     */
    private void jButtonDupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDupActionPerformed
        try {
            controller.execOperation("dup");
        } catch (StackEmptyException ex) {
            popUp(ex.getMessage(), "warning");

        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonDupActionPerformed
    /**
     * This method links the button swap to the operation swap
     *
     * @param evt which is the click on the button
     */
    private void jButtonSwapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSwapActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("swap");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp("You need at least 2 items!", "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonSwapActionPerformed
    /**
     * This method links the button over to the operation over
     *
     * @param evt which is the click on the button
     */
    private void jButtonOverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOverActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("over");

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp("You need at least 2 items!", "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonOverActionPerformed
    /**
     * This method links the button in to the operation of insertion in the
     * stack
     *
     * @param evt which is the click on the button
     */
    private void jButtonInsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsActionPerformed
        insert();
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonInsActionPerformed
    /**
     * This method links the button >x to the operation save to variable
     *
     * @param evt which is the click on the button
     */
    private void jButtonSaveToVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveToVariableActionPerformed
        String var = (String) jComboBox1.getSelectedItem();
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation(">" + var);

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");

        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
    }//GEN-LAST:event_jButtonSaveToVariableActionPerformed
    /**
     * This method is used to read the variable you want to use
     *
     * @param evt
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String var = (String) jComboBox1.getSelectedItem();
    }//GEN-LAST:event_jComboBox1ActionPerformed
    /**
     * This method links the button <x to the operation of taking the value of
     * the variable and pushing it into the stack
     *
     * @param evt which is the click on the button
     */
    private void jButtonSaveToStackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveToStackActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            controller.execOperation("<" + (String) jComboBox1.getSelectedItem());
            viewStack();
            clearTextArea();
        } catch (StackEmptyException ex) {
            Logger.getLogger(CalculatorInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (OperationDoesNotExist ex) {
        }

    }//GEN-LAST:event_jButtonSaveToStackActionPerformed
    /**
     * This method links the button +x to the operation add last element of the
     * stack to variable's value
     *
     * @param evt which is the click on the button
     */
    private void jButtonAddToVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddToVariableActionPerformed
        String var = (String) jComboBox1.getSelectedItem();
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("+" + var);

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");

        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
    }//GEN-LAST:event_jButtonAddToVariableActionPerformed
    /**
     * This method links the button -x to the operation substract the last value
     * of the stack from the value of the variable
     *
     * @param evt which is the click on the button
     */
    private void jButtonSubToVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubToVariableActionPerformed
        String var = (String) jComboBox1.getSelectedItem();
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("-" + var);

        } catch (StackEmptyException ex) {
            copy.undo();
            popUp(ex.getMessage(), "warning");
        } catch (OperationDoesNotExist ex) {
        }
        viewStack();
    }//GEN-LAST:event_jButtonSubToVariableActionPerformed
    /**
     * This method allows the user to insert a number with the click on the
     * enter key
     *
     * @param evt the click on the enter key
     */
    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            insert();
            clearTextArea();
        }
        viewStack();

    }//GEN-LAST:event_jTextArea1KeyPressed
    /**
     * This method links the button SAVE FORMULA to the operation of saving the
     * formula on the file
     *
     * @param evt which is the click on the button
     */
    private void jButtonSaveFormulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveFormulaActionPerformed
        // TODO add your handling code here:

        try {
            controller.saveFile();
            popUp("saved successfully", "info");
        } catch (FileNotFoundException ex) {
            popUp(ex.getMessage(), "error");
        } catch (IOException ex) {
            popUp(ex.getMessage(), "error");
        }

    }//GEN-LAST:event_jButtonSaveFormulaActionPerformed
    /**
     * This method allows us to see the all the formulas
     *
     *
     */
    public static void viewFormulas() {
        dlmFormulas.clear();

        controller.getMapFormulas().forEach((name, formula) -> {

            String containerFormula = name + " = " + formula;
            dlmFormulas.addElement(containerFormula);
        });

    }

    /**
     * This method links the button ADD FORMULA to the operation of adding a
     * formula to the set of formulas
     *
     * @param evt which is the click on the button
     */
    private void jButtonAddFormula1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddFormula1ActionPerformed
        String formula = jTextArea1.getText();

        try {

            controller.addFormula(formula);

        } catch (FormatFormulaException ex) {
            popUp(ex.getMessage(), "error");
        } catch (NameFormulaAlreadyExists ex) {

            int n = JOptionPane.showConfirmDialog(
                    this,
                    ex.getMessage() + "\n Are you sure you want to change the formula?",
                    "warning",
                    JOptionPane.YES_NO_OPTION);
            if (n == 0) {

                //controller.getMapFormulas().put(ex.getName(), ex.getFormula());
                controller.updateFormula(ex.getName(), ex.getFormula());

            }
        }
        clearTextArea();
        viewFormulas();


    }//GEN-LAST:event_jButtonAddFormula1ActionPerformed
    /**
     * This method links the button EXEC FORMULA to the operation of executing
     * the formula
     *
     * @param evt which is the click on the button
     */
    private void jButtonExeFormulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExeFormulaActionPerformed
        // TODO add your handling code here:
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {
            String formula = jTextArea1.getText();
            copy.exec();

            controller.executeFormula(formula);

        } catch (StackEmptyException ex) {

            popUp("Insufficient number of elements!", "warning");
            copy.undo();

        } catch (OperationDoesNotExist ex) {
            popUp(ex.getMessage(), "error");
            copy.undo();
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonExeFormulaActionPerformed
    /**
     * This method links the button * to the operation multiply
     *
     * @param evt which is the click on the button
     */
    private void jButtonMultiplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMultiplicationActionPerformed
        CopyStackCommand copy = new CopyStackCommand(controller.getCalculator());
        try {

            copy.exec();
            controller.execOperation("*");

        } catch (StackEmptyException ex) {
            popUp("You need at least 2 items in the stack!", "warning");
            copy.undo();

        } catch (OperationDoesNotExist ex) {
            Logger.getLogger(CalculatorInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        viewStack();
        clearTextArea();
    }//GEN-LAST:event_jButtonMultiplicationActionPerformed
    /**
     * This method links the button REMOVE FORMULA to the operation of removing
     * the formula
     *
     * @param evt which is the click on the button
     */
    private void removeFormulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFormulaActionPerformed
        String formula = jListFormulas.getSelectedValue();
        if (formula != null) {
            controller.removeFormula(formula);
        } else {
            popUp("Select formula", "info");
        }
        viewFormulas();
    }//GEN-LAST:event_removeFormulaActionPerformed
    /**
     * This method allows us to select an item from the jlist of formulas
     *
     * @param evt which is the click on the JList
     */
    private void jListFormulasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListFormulasMouseClicked

        JList list = (JList) evt.getSource();
        if (evt.getButton() == MouseEvent.BUTTON3) {
            Object oldFormulaName = list.getSelectedValue();

            if (oldFormulaName != null) {
                try {
                    String oldName = oldFormulaName.toString().split("=")[0].trim();
                    String newFormulaName = JOptionPane.showInputDialog(this, "Enter new formula name:");
                    controller.renameFormula(oldName, newFormulaName);
                } catch (NameFormulaAlreadyExists ex) {
                    popUp(ex.getMessage(), "warning");
                }
            }
        }
        if (evt.getClickCount() > 1) {
            Object formula = list.getSelectedValue();
            if (formula != null) {
                jTextArea1.setText(formula.toString());
            }
        }

        viewFormulas();

    }//GEN-LAST:event_jListFormulasMouseClicked
    /**
     * This method links the button SAVE VAR to the operation of saving the
     * current value of the variable
     *
     * @param evt which is the click on the button
     */
    private void jButtonSaveVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveVariableActionPerformed
        try {
            // TODO add your handling code here:
            //CopySpaceVariablesCommand vsc = new CopySpaceVariablesCommand(controller.getVs());
            controller.execOperation("save");
        } catch (StackEmptyException ex) {
        } catch (OperationDoesNotExist ex) {
        }

    }//GEN-LAST:event_jButtonSaveVariableActionPerformed
    /**
     * This method links the button RESTORE VAR to the operation of restoring
     * the saved value of the variable
     *
     * @param evt which is the click on the button
     */
    private void jButtonRestoreVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRestoreVariableActionPerformed
        // TODO add your handling code here:
        controller.undo();
    }//GEN-LAST:event_jButtonRestoreVariableActionPerformed
    /**
     * This method let us see the current stack
     */
    public void viewStack() {

        dlm.clear();

        for (int i = controller.getCalculator().getStack().getSize() - 1; i >= 0; i--) {
            dlm.addElement(controller.getCalculator().getStack().getItem(i));
        }

    }

    /**
     * This method is used to clear the text area
     */
    public void clearTextArea() {
        jTextArea1.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculatorInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculatorInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculatorInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculatorInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculatorInterface().setVisible(true);

            }

        });
    }

    public void insert() {
        String complex = jTextArea1.getText();

        try {
            controller.insert(complex);

        } catch (NumberFormatException | NullPointerException | StringIndexOutOfBoundsException ex) {
            popUp("Not valid entry", "warning");

        }
    }

    private void popUp(String message, String type) {

        switch (type) {
            case "info":
                JOptionPane.showMessageDialog(this,
                        message,
                        "Info",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            case "warning":
                JOptionPane.showMessageDialog(this,
                        message,
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                break;
            case "error":
                JOptionPane.showMessageDialog(this,
                        message,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                break;

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonACos;
    private javax.swing.JButton jButtonASin;
    private javax.swing.JButton jButtonATan;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddFormula1;
    private javax.swing.JButton jButtonAddToVariable;
    private javax.swing.JButton jButtonArg;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonComplex;
    private javax.swing.JButton jButtonCos;
    private javax.swing.JButton jButtonDivision;
    private javax.swing.JButton jButtonDrop;
    private javax.swing.JButton jButtonDup;
    private javax.swing.JButton jButtonExeFormula;
    private javax.swing.JButton jButtonExp;
    private javax.swing.JButton jButtonIns;
    private javax.swing.JButton jButtonInvert;
    private javax.swing.JButton jButtonLn;
    private javax.swing.JButton jButtonMod;
    private javax.swing.JButton jButtonMultiplication;
    private javax.swing.JButton jButtonOver;
    private javax.swing.JButton jButtonPow;
    private javax.swing.JButton jButtonRestoreVariable;
    private javax.swing.JButton jButtonSaveFormula;
    private javax.swing.JButton jButtonSaveToStack;
    private javax.swing.JButton jButtonSaveToVariable;
    private javax.swing.JButton jButtonSaveVariable;
    private javax.swing.JButton jButtonSin;
    private javax.swing.JButton jButtonSqrt;
    private javax.swing.JButton jButtonSub;
    private javax.swing.JButton jButtonSubToVariable;
    private javax.swing.JButton jButtonSwap;
    private javax.swing.JButton jButtonTan;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JList<String> jListFormulas;
    private javax.swing.JList<String> jListStack;
    private javax.swing.JPanel jPanelCalculator;
    private javax.swing.JPanel jPanelNumber;
    private javax.swing.JPanel jPanelOperation;
    private javax.swing.JPanel jPanelStackOperation;
    private javax.swing.JPanel jPanelVariable;
    private javax.swing.JScrollPane jScrollPaneFormulas;
    private javax.swing.JScrollPane jScrollPaneStack;
    private javax.swing.JScrollPane jScrollPaneTextArea;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton removeFormula;
    // End of variables declaration//GEN-END:variables
}
